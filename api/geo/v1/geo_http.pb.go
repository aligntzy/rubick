// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.19.1
// source: geo/v1/geo.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGEOLocation = "/api.geo.v1.GEO/Location"

type GEOHTTPServer interface {
	Location(context.Context, *LocationRequest) (*LocationReply, error)
}

func RegisterGEOHTTPServer(s *http.Server, srv GEOHTTPServer) {
	r := s.Route("/")
	r.GET("/geo/v1/locations", _GEO_Location0_HTTP_Handler(srv))
}

func _GEO_Location0_HTTP_Handler(srv GEOHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LocationRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGEOLocation)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Location(ctx, req.(*LocationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LocationReply)
		return ctx.Result(200, reply)
	}
}

type GEOHTTPClient interface {
	Location(ctx context.Context, req *LocationRequest, opts ...http.CallOption) (rsp *LocationReply, err error)
}

type GEOHTTPClientImpl struct {
	cc *http.Client
}

func NewGEOHTTPClient(client *http.Client) GEOHTTPClient {
	return &GEOHTTPClientImpl{client}
}

func (c *GEOHTTPClientImpl) Location(ctx context.Context, in *LocationRequest, opts ...http.CallOption) (*LocationReply, error) {
	var out LocationReply
	pattern := "/geo/v1/locations"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGEOLocation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
